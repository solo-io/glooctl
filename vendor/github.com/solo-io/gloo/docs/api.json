{
  "files": [
    {
      "name": "config.proto",
      "description": "",
      "package": "v1",
      "hasEnums": false,
      "hasExtensions": false,
      "hasMessages": true,
      "hasServices": false,
      "enums": [],
      "extensions": [],
      "messages": [
        {
          "name": "Config",
          "longName": "Config",
          "fullName": "v1.Config",
          "description": "Config is a top-level config object. It is used internally by gloo as a container for the entire set of config objects.",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "upstreams",
              "description": "The list of all upstreams defined by the user.",
              "label": "repeated",
              "type": "Upstream",
              "longType": "Upstream",
              "fullType": "v1.Upstream",
              "defaultValue": ""
            },
            {
              "name": "virtual_services",
              "description": "the list of all virtual services defined by the user.",
              "label": "repeated",
              "type": "VirtualService",
              "longType": "VirtualService",
              "fullType": "v1.VirtualService",
              "defaultValue": ""
            },
            {
              "name": "virtual_meshes",
              "description": "the list virtual meshes defined by the user",
              "label": "repeated",
              "type": "VirtualMesh",
              "longType": "VirtualMesh",
              "fullType": "v1.VirtualMesh",
              "defaultValue": ""
            }
          ]
        }
      ],
      "services": []
    },
    {
      "name": "metadata.proto",
      "description": "",
      "package": "v1",
      "hasEnums": false,
      "hasExtensions": false,
      "hasMessages": true,
      "hasServices": false,
      "enums": [],
      "extensions": [],
      "messages": [
        {
          "name": "Metadata",
          "longName": "Metadata",
          "fullName": "v1.Metadata",
          "description": "Metadata contains general properties of config resources useful to clients and the gloo control plane for purposes of versioning, annotating, and namespacing resources.",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "resource_version",
              "description": "ResourceVersion keeps track of the resource version of a config resource. This mechanism is used by [gloo-storage](https://github.com/solo-io/gloo/pkg/storage) to ensure safety with concurrent writes/updates to a resource in storage.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "namespace",
              "description": "Namespace is used for the namespacing of resources. Currently unused by gloo internally.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "annotations",
              "description": "Annotations allow clients to tag resources for special use cases. gloo ignores annotations but preserved them on read/write from/to storage.",
              "label": "repeated",
              "type": "AnnotationsEntry",
              "longType": "Metadata.AnnotationsEntry",
              "fullType": "v1.Metadata.AnnotationsEntry",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "AnnotationsEntry",
          "longName": "Metadata.AnnotationsEntry",
          "fullName": "v1.Metadata.AnnotationsEntry",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "key",
              "description": "",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "value",
              "description": "",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            }
          ]
        }
      ],
      "services": []
    },
    {
      "name": "status.proto",
      "description": "",
      "package": "v1",
      "hasEnums": false,
      "hasExtensions": false,
      "hasMessages": true,
      "hasServices": false,
      "enums": [
        {
          "name": "State",
          "longName": "Status.State",
          "fullName": "v1.Status.State",
          "description": "",
          "values": [
            {
              "name": "Pending",
              "number": "0",
              "description": "Pending status indicates the resource has not yet been validated"
            },
            {
              "name": "Accepted",
              "number": "1",
              "description": "Accepted indicates the resource has been validated"
            },
            {
              "name": "Rejected",
              "number": "2",
              "description": "Rejected indicates an invalid configuration by the user\nRejected resources may be propagated to the xDS server depending on their severity"
            }
          ]
        }
      ],
      "extensions": [],
      "messages": [
        {
          "name": "Status",
          "longName": "Status",
          "fullName": "v1.Status",
          "description": "Status indicates whether a config resource (currently only [virtualservices](../introduction/concepts.md) and [upstreams](../introduction/concepts.md)) has been (in)validated by gloo",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "state",
              "description": "State is the enum indicating the state of the resource",
              "label": "",
              "type": "State",
              "longType": "Status.State",
              "fullType": "v1.Status.State",
              "defaultValue": ""
            },
            {
              "name": "reason",
              "description": "Reason is a description of the error for Rejected resources. If the resource is pending or accepted, this field will be empty",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            }
          ]
        }
      ],
      "services": []
    },
    {
      "name": "upstream.proto",
      "description": "",
      "package": "v1",
      "hasEnums": false,
      "hasExtensions": false,
      "hasMessages": true,
      "hasServices": false,
      "enums": [],
      "extensions": [],
      "messages": [
        {
          "name": "Upstream",
          "longName": "Upstream",
          "fullName": "v1.Upstream",
          "description": "Upstream represents a destination for routing. Upstreams can be compared to\n[clusters](https://www.envoyproxy.io/docs/envoy/latest/api-v1/cluster_manager/cluster.html?highlight=cluster) in Envoy terminology.\nUpstreams can take a variety of types\u003c!--(TODO)--\u003e in gloo. Language extensions known as plugins\u003c!--(TODO)--\u003e allow the addition of new\ntypes of upstreams. \u003c!--See [upstream types](TODO) for a detailed description of available upstream types.--\u003e",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "name",
              "description": "Name of the upstream. Names must be unique and follow the following syntax rules:\nOne or more lowercase rfc1035/rfc1123 labels separated by '.' with a maximum length of 253 characters.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "type",
              "description": "Type indicates the type of the upstream. Examples include service\u003c!--(TODO)--\u003e, kubernetes\u003c!--(TODO)--\u003e, and [aws](../plugins/aws.md)\nTypes are defined by the plugin\u003c!--(TODO)--\u003e associated with them.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "connection_timeout",
              "description": "Connection Timeout tells gloo to set a timeout for unresponsive connections created to this upstream.\nIf not provided by the user, it will set to a default value",
              "label": "",
              "type": "Duration",
              "longType": "google.protobuf.Duration",
              "fullType": "google.protobuf.Duration",
              "defaultValue": ""
            },
            {
              "name": "spec",
              "description": "Spec contains properties that are specific to the upstream type. The spec is always required, but\nthe expected content is specified by the [upstream plugin] for the given upstream type.\nMost often the upstream spec will be a map\u003cstring, string\u003e",
              "label": "",
              "type": "Struct",
              "longType": "google.protobuf.Struct",
              "fullType": "google.protobuf.Struct",
              "defaultValue": ""
            },
            {
              "name": "functions",
              "description": "Certain upstream types support (and may require) [functions](../introduction/concepts.md#Functions).\nFunctions allow function-level routing to be done. For example, the [AWS lambda](../plugins/aws.md) upstream type\nPermits routing to AWS lambda function].\n[routes](virtualservice.md#Route) on virtualservices can specify function destinations to route to specific functions.",
              "label": "repeated",
              "type": "Function",
              "longType": "Function",
              "fullType": "v1.Function",
              "defaultValue": ""
            },
            {
              "name": "service_info",
              "description": "Service Info contains information about the service running on the upstream\nService Info is optional, but is used by certain plugins (such as the gRPC plugin)\nas well as discovery services to provide sophistocated routing features for well-known\ntypes of services",
              "label": "",
              "type": "ServiceInfo",
              "longType": "ServiceInfo",
              "fullType": "v1.ServiceInfo",
              "defaultValue": ""
            },
            {
              "name": "status",
              "description": "Status indicates the validation status of the upstream resource. Status is read-only by clients, and set by gloo during validation",
              "label": "",
              "type": "Status",
              "longType": "Status",
              "fullType": "v1.Status",
              "defaultValue": ""
            },
            {
              "name": "metadata",
              "description": "Metadata contains the resource metadata for the upstream",
              "label": "",
              "type": "Metadata",
              "longType": "Metadata",
              "fullType": "v1.Metadata",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "ServiceInfo",
          "longName": "ServiceInfo",
          "fullName": "v1.ServiceInfo",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "type",
              "description": "Type indicates the type of service running on the upstream.\nCurrent options include `REST`, `gRPC`, and `NATS`",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "properties",
              "description": "Properties contains properties that describe the service. The spec may be required\nby the Upstream Plugin that handles the given Service Type\nMost often the service properties will be a map\u003cstring, string\u003e",
              "label": "",
              "type": "Struct",
              "longType": "google.protobuf.Struct",
              "fullType": "google.protobuf.Struct",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Function",
          "longName": "Function",
          "fullName": "v1.Function",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "name",
              "description": "Name of the function. Functions are referenced by name from routes and therefore must be unique within an upstream",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "spec",
              "description": "Spec for the function. Like [upstream specs](TODO), the content of function specs is specified by the [upstream plugin](TODO) for the upstream's type.",
              "label": "",
              "type": "Struct",
              "longType": "google.protobuf.Struct",
              "fullType": "google.protobuf.Struct",
              "defaultValue": ""
            }
          ]
        }
      ],
      "services": []
    },
    {
      "name": "virtualmesh.proto",
      "description": "",
      "package": "v1",
      "hasEnums": false,
      "hasExtensions": false,
      "hasMessages": true,
      "hasServices": false,
      "enums": [],
      "extensions": [],
      "messages": [
        {
          "name": "VirtualMesh",
          "longName": "VirtualMesh",
          "fullName": "v1.VirtualMesh",
          "description": "A Virtual Mesh is a container for a set of Virtual Services that will be used to generate a single proxy config\nto be applied to one or more Envoy nodes. The Virtual Mesh is best understood as an in-mesh application's localized view\nof the rest of the mesh.\nEach domains for each Virtual Services contained in a Virtual Mesh cannot appear more than once, or the Virtual Mesh\nwill be invalid.",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "name",
              "description": "Name of the virtual mesh. Envoy nodes will be assigned a config corresponding with virtual mesh they are assigned.\nEnvoy instances must specify the virtual mesh they belong to when they register to Gloo.\n\nCurrently this is done by specifying the name of the virtual mesh as a prefix to the Envoy's Node ID\nwhich can be specified with the `--service-node` flag, or in the Envoy instance's bootstrap config.\n\nNames must be unique and follow the following syntax rules:\nOne or more lowercase rfc1035/rfc1123 labels separated by '.' with a maximum length of 253 characters.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "virtual_services",
              "description": "the list of names of the virtual services this vmesh includes.",
              "label": "repeated",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "status",
              "description": "Status indicates the validation status of the virtual mesh resource.\nStatus is read-only by clients, and set by gloo during validation",
              "label": "",
              "type": "Status",
              "longType": "Status",
              "fullType": "v1.Status",
              "defaultValue": ""
            },
            {
              "name": "metadata",
              "description": "Metadata contains the resource metadata for the virtual mesh",
              "label": "",
              "type": "Metadata",
              "longType": "Metadata",
              "fullType": "v1.Metadata",
              "defaultValue": ""
            }
          ]
        }
      ],
      "services": []
    },
    {
      "name": "virtualservice.proto",
      "description": "",
      "package": "v1",
      "hasEnums": false,
      "hasExtensions": false,
      "hasMessages": true,
      "hasServices": false,
      "enums": [],
      "extensions": [],
      "messages": [
        {
          "name": "VirtualService",
          "longName": "VirtualService",
          "fullName": "v1.VirtualService",
          "description": "Virtual Services represent a collection of routes for a set of domains.\nGloo's Virtual Services can be compared to\n[virtual services](https://www.envoyproxy.io/docs/envoy/latest/api-v1/route_config/vService.html?highlight=virtual%20host) in Envoy terminology.\nA virtual service can be used to define \"apps\"; a collection of APIs that belong to a particular domain.\nThe Virtual Service concept allows configuration of per-virtualservice SSL certificates",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "name",
              "description": "Name of the virtual service. Names must be unique and follow the following syntax rules:\nOne or more lowercase rfc1035/rfc1123 labels separated by '.' with a maximum length of 253 characters.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "domains",
              "description": "Domains represent the list of domains (host/authority header) that will match for all routes on this virtual service.\nAs in Envoy: wildcard hosts are supported in the form of “*.foo.com” or “*-bar.foo.com”.\nIf domains is empty, gloo will set the domain to \"*\", making that virtual service the \"default\" virtualservice.\nThe default virtualservice will be the fallback virtual service for all requests that do not match a domain on an existing virtual service.\nOnly one default virtual service can be defined (either with an empty domain list, or a domain list that includes \"*\")",
              "label": "repeated",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "routes",
              "description": "Routes define the list of [routes](../) that live on this virtual service.",
              "label": "repeated",
              "type": "Route",
              "longType": "Route",
              "fullType": "v1.Route",
              "defaultValue": ""
            },
            {
              "name": "ssl_config",
              "description": "SSL Config is optional for the virtual service. If provided, the virtual service will listen on the envoy HTTPS listener port (default :8443)\nIf left empty, the virtual service will listen on the HTTP listener port (default :8080)",
              "label": "",
              "type": "SSLConfig",
              "longType": "SSLConfig",
              "fullType": "v1.SSLConfig",
              "defaultValue": ""
            },
            {
              "name": "status",
              "description": "Status indicates the validation status of the virtual service resource. Status is read-only by clients, and set by gloo during validation",
              "label": "",
              "type": "Status",
              "longType": "Status",
              "fullType": "v1.Status",
              "defaultValue": ""
            },
            {
              "name": "metadata",
              "description": "Metadata contains the resource metadata for the virtual service",
              "label": "",
              "type": "Metadata",
              "longType": "Metadata",
              "fullType": "v1.Metadata",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Route",
          "longName": "Route",
          "fullName": "v1.Route",
          "description": "Routes declare the entrypoints on virtual services and the upstreams or functions they route requests to",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "request_matcher",
              "description": "request_matcher indicates this route should match requests according to the specification in the provided RequestMatcher\nonly one of request_matcher or event_matcher can be set",
              "label": "",
              "type": "RequestMatcher",
              "longType": "RequestMatcher",
              "fullType": "v1.RequestMatcher",
              "defaultValue": ""
            },
            {
              "name": "event_matcher",
              "description": "eventt_matcher indicates this route should match requests according to the specification in the provided EventMatcher\nonly one of request_matcher or event_matcher can be set",
              "label": "",
              "type": "EventMatcher",
              "longType": "EventMatcher",
              "fullType": "v1.EventMatcher",
              "defaultValue": ""
            },
            {
              "name": "multiple_destinations",
              "description": "A route is only allowed to specify one of multiple_destinations or single_destination. Setting both will result in an error\nMultiple Destinations is used when a user wants a route to balance requests between multiple destinations\nBalancing is done by probability, where weights are specified for each destination",
              "label": "repeated",
              "type": "WeightedDestination",
              "longType": "WeightedDestination",
              "fullType": "v1.WeightedDestination",
              "defaultValue": ""
            },
            {
              "name": "single_destination",
              "description": "A single destination is specified when a route only routes to a single destination.",
              "label": "",
              "type": "Destination",
              "longType": "Destination",
              "fullType": "v1.Destination",
              "defaultValue": ""
            },
            {
              "name": "prefix_rewrite",
              "description": "PrefixRewrite can be specified to rewrite the matched path of the request path to a new prefix",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "extensions",
              "description": "Extensions provides a way to extend the behavior of a route. In addition to the core route extensions\u003c!--(TODO)--\u003e,\ngloo provides the means for route plugins\u003c!--(TODO)--\u003e to be added to gloo which add new types of route extensions.\n\u003c!--See the route extensions section for a more detailed explanation--\u003e",
              "label": "",
              "type": "Struct",
              "longType": "google.protobuf.Struct",
              "fullType": "google.protobuf.Struct",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "RequestMatcher",
          "longName": "RequestMatcher",
          "fullName": "v1.RequestMatcher",
          "description": "Request Matcher is a route matcher for traditional http requests\nRequest Matchers stand in juxtoposition to Event Matchers, which match \"events\" rather than HTTP Requests",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "path_prefix",
              "description": "Prefix will match any request whose path begins with this prefix\nOnly one of path_prefix, path_regex, or path_exact can be set",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "path_regex",
              "description": "Regex will match any path that matches this regex string\nOnly one of path_prefix, path_regex, or path_exact can be set",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "path_exact",
              "description": "Exact will match only requests with exactly this path\nOnly one of path_prefix, path_regex, or path_exact can be set",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "headers",
              "description": "Headers specify a list of request headers and their values the request must contain to match this route\nIf a value is not specified (empty string) for a header, all values will match so long as the header is present on the request",
              "label": "repeated",
              "type": "HeadersEntry",
              "longType": "RequestMatcher.HeadersEntry",
              "fullType": "v1.RequestMatcher.HeadersEntry",
              "defaultValue": ""
            },
            {
              "name": "query_params",
              "description": "Query params work the same way as headers, but for query string parameters",
              "label": "repeated",
              "type": "QueryParamsEntry",
              "longType": "RequestMatcher.QueryParamsEntry",
              "fullType": "v1.RequestMatcher.QueryParamsEntry",
              "defaultValue": ""
            },
            {
              "name": "verbs",
              "description": "HTTP Verb(s) to match on. If none specified, the matcher will match all verbs",
              "label": "repeated",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "HeadersEntry",
          "longName": "RequestMatcher.HeadersEntry",
          "fullName": "v1.RequestMatcher.HeadersEntry",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "key",
              "description": "",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "value",
              "description": "",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "QueryParamsEntry",
          "longName": "RequestMatcher.QueryParamsEntry",
          "fullName": "v1.RequestMatcher.QueryParamsEntry",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "key",
              "description": "",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "value",
              "description": "",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "EventMatcher",
          "longName": "EventMatcher",
          "fullName": "v1.EventMatcher",
          "description": "Event matcher is a special kind of matcher for CloudEvents\nThe CloudEvents API is described here: https://github.com/cloudevents/spec/blob/master/spec.md",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "event_type",
              "description": "Event Type indicates the event type or topic to match",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "WeightedDestination",
          "longName": "WeightedDestination",
          "fullName": "v1.WeightedDestination",
          "description": "WeightedDestination attaches a weight to a destination\nFor use in routes with multiple destinations",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "destination",
              "description": "",
              "label": "",
              "type": "Destination",
              "longType": "Destination",
              "fullType": "v1.Destination",
              "defaultValue": ""
            },
            {
              "name": "weight",
              "description": "Weight must be greater than zero\nRouting to each destination will be balanced by the ratio of the destination's weight to the total weight on a route",
              "label": "",
              "type": "uint32",
              "longType": "uint32",
              "fullType": "uint32",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Destination",
          "longName": "Destination",
          "fullName": "v1.Destination",
          "description": "Destination is a destination that requests can be routed to.",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "function",
              "description": "function indicates requests sent to this destination will invoke a function\nOnly one of funtion or upstream should be set",
              "label": "",
              "type": "FunctionDestination",
              "longType": "FunctionDestination",
              "fullType": "v1.FunctionDestination",
              "defaultValue": ""
            },
            {
              "name": "upstream",
              "description": "upstream indicates requests sent to this destination will be routed to an upstream\nOnly one of funtion or upstream should be set",
              "label": "",
              "type": "UpstreamDestination",
              "longType": "UpstreamDestination",
              "fullType": "v1.UpstreamDestination",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "FunctionDestination",
          "longName": "FunctionDestination",
          "fullName": "v1.FunctionDestination",
          "description": "FunctionDestination will route a request to a specific function defined for an upstream",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "upstream_name",
              "description": "Upstream Name is the name of the upstream the function belongs to",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "function_name",
              "description": "Function Name is the name of the function as defined on the upstream",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "UpstreamDestination",
          "longName": "UpstreamDestination",
          "fullName": "v1.UpstreamDestination",
          "description": "Upstream Destination routes a request to an upstream",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "name",
              "description": "Name of the upstream",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "SSLConfig",
          "longName": "SSLConfig",
          "fullName": "v1.SSLConfig",
          "description": "SSLConfig contains the options necessary to configure a virtualservice to use TLS",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "secret_ref",
              "description": "SecretRef contains the secret ref\u003c!--(TODO)--\u003e to a gloo secret\u003c!--(TODO)--\u003e containing the following structure:\n{\n\"ca_chain\": \u003cca chain data...\u003e,\n\"private key\": \u003cprivate key data...\u003e\n}",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            }
          ]
        }
      ],
      "services": []
    }
  ],
  "scalarValueTypes": [
    {
      "protoType": "double",
      "notes": "",
      "cppType": "double",
      "csType": "double",
      "goType": "float64",
      "javaType": "double",
      "phpType": "float",
      "pythonType": "float",
      "rubyType": "Float"
    },
    {
      "protoType": "float",
      "notes": "",
      "cppType": "float",
      "csType": "float",
      "goType": "float32",
      "javaType": "float",
      "phpType": "float",
      "pythonType": "float",
      "rubyType": "Float"
    },
    {
      "protoType": "int32",
      "notes": "Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.",
      "cppType": "int32",
      "csType": "int",
      "goType": "int32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "int64",
      "notes": "Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.",
      "cppType": "int64",
      "csType": "long",
      "goType": "int64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "uint32",
      "notes": "Uses variable-length encoding.",
      "cppType": "uint32",
      "csType": "uint",
      "goType": "uint32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int/long",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "uint64",
      "notes": "Uses variable-length encoding.",
      "cppType": "uint64",
      "csType": "ulong",
      "goType": "uint64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "sint32",
      "notes": "Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.",
      "cppType": "int32",
      "csType": "int",
      "goType": "int32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "sint64",
      "notes": "Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.",
      "cppType": "int64",
      "csType": "long",
      "goType": "int64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "fixed32",
      "notes": "Always four bytes. More efficient than uint32 if values are often greater than 2^28.",
      "cppType": "uint32",
      "csType": "uint",
      "goType": "uint32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "fixed64",
      "notes": "Always eight bytes. More efficient than uint64 if values are often greater than 2^56.",
      "cppType": "uint64",
      "csType": "ulong",
      "goType": "uint64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "sfixed32",
      "notes": "Always four bytes.",
      "cppType": "int32",
      "csType": "int",
      "goType": "int32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "sfixed64",
      "notes": "Always eight bytes.",
      "cppType": "int64",
      "csType": "long",
      "goType": "int64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "bool",
      "notes": "",
      "cppType": "bool",
      "csType": "bool",
      "goType": "bool",
      "javaType": "boolean",
      "phpType": "boolean",
      "pythonType": "boolean",
      "rubyType": "TrueClass/FalseClass"
    },
    {
      "protoType": "string",
      "notes": "A string must always contain UTF-8 encoded or 7-bit ASCII text.",
      "cppType": "string",
      "csType": "string",
      "goType": "string",
      "javaType": "String",
      "phpType": "string",
      "pythonType": "str/unicode",
      "rubyType": "String (UTF-8)"
    },
    {
      "protoType": "bytes",
      "notes": "May contain any arbitrary sequence of bytes.",
      "cppType": "string",
      "csType": "ByteString",
      "goType": "[]byte",
      "javaType": "ByteString",
      "phpType": "string",
      "pythonType": "str",
      "rubyType": "String (ASCII-8BIT)"
    }
  ]
}