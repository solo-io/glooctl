package consul

import (
	"github.com/solo-io/gloo/pkg/api/types/v1"
	"github.com/solo-io/gloo/pkg/storage"
	"github.com/solo-io/gloo/pkg/storage/base"
)

type {{ .LowercasePluralName }}Client struct {
	base *base.ConsulStorageClient
}

func (c *{{ .LowercasePluralName }}Client) Create(item *v1.{{ .UppercaseName }}) (*v1.{{ .UppercaseName }}, error) {
	out, err := c.base.Create(&base.StorableItem{{"{"}}{{ .UppercaseName }}: item})
	if err != nil {
		return nil, err
	}
	return out.{{ .UppercaseName }}, nil
}

func (c *{{ .LowercasePluralName }}Client) Update(item *v1.{{ .UppercaseName }}) (*v1.{{ .UppercaseName }}, error) {
	out, err := c.base.Update(&base.StorableItem{{"{"}}{{ .UppercaseName }}: item})
	if err != nil {
		return nil, err
	}
	return out.{{ .UppercaseName }}, nil
}

func (c *{{ .LowercasePluralName }}Client) Delete(name string) error {
	return c.base.Delete(name)
}

func (c *{{ .LowercasePluralName }}Client) Get(name string) (*v1.{{ .UppercaseName }}, error) {
	out, err := c.base.Get(name)
	if err != nil {
		return nil, err
	}
	return out.{{ .UppercaseName }}, nil
}

func (c *{{ .LowercasePluralName }}Client) List() ([]*v1.{{ .UppercaseName }}, error) {
	list, err := c.base.List()
	if err != nil {
		return nil, err
	}
	var {{ .LowercasePluralName }} []*v1.{{ .UppercaseName }}
	for _, obj := range list {
		{{ .LowercasePluralName }} = append({{ .LowercasePluralName }}, obj.{{ .UppercaseName }})
	}
	return {{ .LowercasePluralName }}, nil
}

func (c *{{ .LowercasePluralName }}Client) Watch(handlers ...storage.{{ .UppercaseName }}EventHandler) (*storage.Watcher, error) {
	var baseHandlers []base.StorableItemEventHandler
	for _, h := range handlers {
		baseHandlers = append(baseHandlers, base.StorableItemEventHandler{{"{"}}{{ .UppercaseName }}EventHandler: h})
	}
	return c.base.Watch(baseHandlers...)
}
