/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	scheme "github.com/solo-io/gloo/pkg/storage/crd/client/clientset/versioned/scheme"
	v1 "github.com/solo-io/gloo/pkg/storage/crd/solo.io/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// VirtualMeshesGetter has a method to return a VirtualMeshInterface.
// A group's client should implement this interface.
type VirtualMeshesGetter interface {
	VirtualMeshes(namespace string) VirtualMeshInterface
}

// VirtualMeshInterface has methods to work with VirtualMesh resources.
type VirtualMeshInterface interface {
	Create(*v1.VirtualMesh) (*v1.VirtualMesh, error)
	Update(*v1.VirtualMesh) (*v1.VirtualMesh, error)
	Delete(name string, options *meta_v1.DeleteOptions) error
	DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error
	Get(name string, options meta_v1.GetOptions) (*v1.VirtualMesh, error)
	List(opts meta_v1.ListOptions) (*v1.VirtualMeshList, error)
	Watch(opts meta_v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.VirtualMesh, err error)
	VirtualMeshExpansion
}

// virtualMeshes implements VirtualMeshInterface
type virtualMeshes struct {
	client rest.Interface
	ns     string
}

// newVirtualMeshes returns a VirtualMeshes
func newVirtualMeshes(c *GlooV1Client, namespace string) *virtualMeshes {
	return &virtualMeshes{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the virtualMesh, and returns the corresponding virtualMesh object, and an error if there is any.
func (c *virtualMeshes) Get(name string, options meta_v1.GetOptions) (result *v1.VirtualMesh, err error) {
	result = &v1.VirtualMesh{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("virtualmeshes").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of VirtualMeshes that match those selectors.
func (c *virtualMeshes) List(opts meta_v1.ListOptions) (result *v1.VirtualMeshList, err error) {
	result = &v1.VirtualMeshList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("virtualmeshes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested virtualMeshes.
func (c *virtualMeshes) Watch(opts meta_v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("virtualmeshes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a virtualMesh and creates it.  Returns the server's representation of the virtualMesh, and an error, if there is any.
func (c *virtualMeshes) Create(virtualMesh *v1.VirtualMesh) (result *v1.VirtualMesh, err error) {
	result = &v1.VirtualMesh{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("virtualmeshes").
		Body(virtualMesh).
		Do().
		Into(result)
	return
}

// Update takes the representation of a virtualMesh and updates it. Returns the server's representation of the virtualMesh, and an error, if there is any.
func (c *virtualMeshes) Update(virtualMesh *v1.VirtualMesh) (result *v1.VirtualMesh, err error) {
	result = &v1.VirtualMesh{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("virtualmeshes").
		Name(virtualMesh.Name).
		Body(virtualMesh).
		Do().
		Into(result)
	return
}

// Delete takes name of the virtualMesh and deletes it. Returns an error if one occurs.
func (c *virtualMeshes) Delete(name string, options *meta_v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("virtualmeshes").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *virtualMeshes) DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("virtualmeshes").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched virtualMesh.
func (c *virtualMeshes) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.VirtualMesh, err error) {
	result = &v1.VirtualMesh{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("virtualmeshes").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
