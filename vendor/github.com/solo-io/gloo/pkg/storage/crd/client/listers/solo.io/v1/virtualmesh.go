/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/solo-io/gloo/pkg/storage/crd/solo.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualMeshLister helps list VirtualMeshes.
type VirtualMeshLister interface {
	// List lists all VirtualMeshes in the indexer.
	List(selector labels.Selector) (ret []*v1.VirtualMesh, err error)
	// VirtualMeshes returns an object that can list and get VirtualMeshes.
	VirtualMeshes(namespace string) VirtualMeshNamespaceLister
	VirtualMeshListerExpansion
}

// virtualMeshLister implements the VirtualMeshLister interface.
type virtualMeshLister struct {
	indexer cache.Indexer
}

// NewVirtualMeshLister returns a new VirtualMeshLister.
func NewVirtualMeshLister(indexer cache.Indexer) VirtualMeshLister {
	return &virtualMeshLister{indexer: indexer}
}

// List lists all VirtualMeshes in the indexer.
func (s *virtualMeshLister) List(selector labels.Selector) (ret []*v1.VirtualMesh, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VirtualMesh))
	})
	return ret, err
}

// VirtualMeshes returns an object that can list and get VirtualMeshes.
func (s *virtualMeshLister) VirtualMeshes(namespace string) VirtualMeshNamespaceLister {
	return virtualMeshNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualMeshNamespaceLister helps list and get VirtualMeshes.
type VirtualMeshNamespaceLister interface {
	// List lists all VirtualMeshes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.VirtualMesh, err error)
	// Get retrieves the VirtualMesh from the indexer for a given namespace and name.
	Get(name string) (*v1.VirtualMesh, error)
	VirtualMeshNamespaceListerExpansion
}

// virtualMeshNamespaceLister implements the VirtualMeshNamespaceLister
// interface.
type virtualMeshNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualMeshes in the indexer for a given namespace.
func (s virtualMeshNamespaceLister) List(selector labels.Selector) (ret []*v1.VirtualMesh, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VirtualMesh))
	})
	return ret, err
}

// Get retrieves the VirtualMesh from the indexer for a given namespace and name.
func (s virtualMeshNamespaceLister) Get(name string) (*v1.VirtualMesh, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("virtualmesh"), name)
	}
	return obj.(*v1.VirtualMesh), nil
}
