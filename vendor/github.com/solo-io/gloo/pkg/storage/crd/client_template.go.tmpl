package crd

import (
	"time"

	"github.com/pkg/errors"
	"github.com/solo-io/gloo/pkg/api/types/v1"
	"github.com/solo-io/gloo/pkg/storage"
	crdclientset "github.com/solo-io/gloo/pkg/storage/crd/client/clientset/versioned"
	crdv1 "github.com/solo-io/gloo/pkg/storage/crd/solo.io/v1"
	apiexts "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/fields"

	"github.com/solo-io/gloo/pkg/storage/crud"
	kuberrs "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/client-go/tools/cache"
	"github.com/solo-io/gloo/pkg/log"
)

type {{ .LowercasePluralName }}Client struct {
	crds    crdclientset.Interface
	apiexts apiexts.Interface
	// write and read objects to this namespace if not specified on the GlooObjects
	namespace     string
	syncFrequency time.Duration
}

func (c *{{ .LowercasePluralName }}Client) Create(item *v1.{{ .UppercaseName }}) (*v1.{{ .UppercaseName }}, error) {
	return c.createOrUpdate{{ .UppercaseName }}Crd(item, crud.OperationCreate)
}

func (c *{{ .LowercasePluralName }}Client) Update(item *v1.{{ .UppercaseName }}) (*v1.{{ .UppercaseName }}, error) {
	return c.createOrUpdate{{ .UppercaseName }}Crd(item, crud.OperationUpdate)
}

func (c *{{ .LowercasePluralName }}Client) Delete(name string) error {
	return c.crds.GlooV1().{{ .UppercasePluralName }}(c.namespace).Delete(name, nil)
}

func (c *{{ .LowercasePluralName }}Client) Get(name string) (*v1.{{ .UppercaseName }}, error) {
	crd{{ .UppercaseName }}, err := c.crds.GlooV1().{{ .UppercasePluralName }}(c.namespace).Get(name, metav1.GetOptions{})
	if err != nil {
		return nil, errors.Wrap(err, "failed performing get api request")
	}
	var returned{{ .UppercaseName }} v1.{{ .UppercaseName }}
	if err := ConfigObjectFromCrd(
		crd{{ .UppercaseName }}.ObjectMeta,
		crd{{ .UppercaseName }}.Spec,
		crd{{ .UppercaseName }}.Status,
		&returned{{ .UppercaseName }}); err != nil {
		return nil, errors.Wrap(err, "converting returned crd to {{ .LowercaseName }}")
	}
	return &returned{{ .UppercaseName }}, nil
}

func (c *{{ .LowercasePluralName }}Client) List() ([]*v1.{{ .UppercaseName }}, error) {
	crdList, err := c.crds.GlooV1().{{ .UppercasePluralName }}(c.namespace).List(metav1.ListOptions{})
	if err != nil {
		return nil, errors.Wrap(err, "failed performing list api request")
	}
	var returned{{ .UppercasePluralName }} []*v1.{{ .UppercaseName }}
	for _, crd{{ .UppercaseName }} := range crdList.Items {
		var returned{{ .UppercaseName }} v1.{{ .UppercaseName }}
		if err := ConfigObjectFromCrd(
			crd{{ .UppercaseName }}.ObjectMeta,
			crd{{ .UppercaseName }}.Spec,
			crd{{ .UppercaseName }}.Status,
			&returned{{ .UppercaseName }}); err != nil {
			return nil, errors.Wrap(err, "converting returned crd to {{ .LowercaseName }}")
		}
		returned{{ .UppercasePluralName }} = append(returned{{ .UppercasePluralName }}, &returned{{ .UppercaseName }})
	}
	return returned{{ .UppercasePluralName }}, nil
}

func (u *{{ .LowercasePluralName }}Client) Watch(handlers ...storage.{{ .UppercaseName }}EventHandler) (*storage.Watcher, error) {
	lw := cache.NewListWatchFromClient(u.crds.GlooV1().RESTClient(), crdv1.{{ .UppercaseName }}CRD.Plural, u.namespace, fields.Everything())
	sw := cache.NewSharedInformer(lw, new(crdv1.{{ .UppercaseName }}), u.syncFrequency)
	for _, h := range handlers {
		sw.AddEventHandler(&{{ .LowercaseName }}EventHandler{handler: h, store: sw.GetStore()})
	}
	return storage.NewWatcher(func(stop <-chan struct{}, _ chan error) {
		sw.Run(stop)
	}), nil
}

func (c *{{ .LowercasePluralName }}Client) createOrUpdate{{ .UppercaseName }}Crd({{ .LowercaseName }} *v1.{{ .UppercaseName }}, op crud.Operation) (*v1.{{ .UppercaseName }}, error) {
	{{ .LowercaseName }}Crd, err := ConfigObjectToCrd(c.namespace, {{ .LowercaseName }})
	if err != nil {
		return nil, errors.Wrap(err, "converting gloo object to crd")
	}
	{{ .LowercasePluralName }} := c.crds.GlooV1().{{ .UppercasePluralName }}({{ .LowercaseName }}Crd.GetNamespace())
	var returnedCrd *crdv1.{{ .UppercaseName }}
	switch op {
	case crud.OperationCreate:
		returnedCrd, err = {{ .LowercasePluralName }}.Create({{ .LowercaseName }}Crd.(*crdv1.{{ .UppercaseName }}))
		if err != nil {
			if kuberrs.IsAlreadyExists(err) {
				return nil, storage.NewAlreadyExistsErr(err)
			}
			return nil, errors.Wrap(err, "kubernetes create api request")
		}
	case crud.OperationUpdate:
		// need to make sure we preserve labels
		currentCrd, err := {{ .LowercasePluralName }}.Get({{ .LowercaseName }}Crd.GetName(), metav1.GetOptions{ResourceVersion: {{ .LowercaseName }}Crd.GetResourceVersion()})
		if err != nil {
			return nil, errors.Wrap(err, "kubernetes get api request")
		}
		// copy labels
		{{ .LowercaseName }}Crd.SetLabels(currentCrd.Labels)
		returnedCrd, err = {{ .LowercasePluralName }}.Update({{ .LowercaseName }}Crd.(*crdv1.{{ .UppercaseName }}))
		if err != nil {
			return nil, errors.Wrap(err, "kubernetes update api request")
		}
	}
	var returned{{ .UppercaseName }} v1.{{ .UppercaseName }}
	if err := ConfigObjectFromCrd(
		returnedCrd.ObjectMeta,
		returnedCrd.Spec,
		returnedCrd.Status,
		&returned{{ .UppercaseName }}); err != nil {
		return nil, errors.Wrap(err, "converting returned crd to {{ .LowercaseName }}")
	}
	return &returned{{ .UppercaseName }}, nil
}

// implements the kubernetes ResourceEventHandler interface
type {{ .LowercaseName }}EventHandler struct {
	handler storage.{{ .UppercaseName }}EventHandler
	store   cache.Store
}

func (eh *{{ .LowercaseName }}EventHandler) getUpdatedList() []*v1.{{ .UppercaseName }} {
	updatedList := eh.store.List()
	var updated{{ .UppercaseName }}List []*v1.{{ .UppercaseName }}
	for _, updated := range updatedList {
		{{ .LowercaseName }}Crd, ok := updated.(*crdv1.{{ .UppercaseName }})
		if !ok {
			continue
		}
		var returned{{ .UppercaseName }} v1.{{ .UppercaseName }}
		if err := ConfigObjectFromCrd(
			{{ .LowercaseName }}Crd.ObjectMeta,
			{{ .LowercaseName }}Crd.Spec,
			{{ .LowercaseName }}Crd.Status,
			&returned{{ .UppercaseName }}); err != nil {
			log.Warnf("watch event: %v", errors.Wrap(err, "converting returned crd to {{ .LowercaseName }}"))
		}
		updated{{ .UppercaseName }}List = append(updated{{ .UppercaseName }}List, &returned{{ .UppercaseName }})
	}
	return updated{{ .UppercaseName }}List
}

func convert{{ .UppercaseName }}(obj interface{}) (*v1.{{ .UppercaseName }}, bool) {
	{{ .LowercaseName }}Crd, ok := obj.(*crdv1.{{ .UppercaseName }})
	if !ok {
		return nil, ok
	}
	var returned{{ .UppercaseName }} v1.{{ .UppercaseName }}
	if err := ConfigObjectFromCrd(
		{{ .LowercaseName }}Crd.ObjectMeta,
		{{ .LowercaseName }}Crd.Spec,
		{{ .LowercaseName }}Crd.Status,
		&returned{{ .UppercaseName }}); err != nil {
		log.Warnf("watch event: %v", errors.Wrap(err, "converting returned crd to {{ .LowercaseName }}"))
		return nil, false
	}
	return &returned{{ .UppercaseName }}, true
}

func (eh *{{ .LowercaseName }}EventHandler) OnAdd(obj interface{}) {
	{{ .LowercaseName }}, ok := convert{{ .UppercaseName }}(obj)
	if !ok {
		return
	}
	eh.handler.OnAdd(eh.getUpdatedList(), {{ .LowercaseName }})
}
func (eh *{{ .LowercaseName }}EventHandler) OnUpdate(_, newObj interface{}) {
	new{{ .UppercaseName }}, ok := convert{{ .UppercaseName }}(newObj)
	if !ok {
		return
	}
	eh.handler.OnUpdate(eh.getUpdatedList(), new{{ .UppercaseName }})
}

func (eh *{{ .LowercaseName }}EventHandler) OnDelete(obj interface{}) {
	{{ .LowercaseName }}, ok := convert{{ .UppercaseName }}(obj)
	if !ok {
		return
	}
	eh.handler.OnDelete(eh.getUpdatedList(), {{ .LowercaseName }})
}
